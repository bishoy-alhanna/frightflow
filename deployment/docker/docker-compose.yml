version: '3.8'

services:
  # Database
  postgres:
    image: postgres:16-alpine
    container_name: freight-postgres
    environment:
      POSTGRES_DB: freight_db
      POSTGRES_USER: freight
      POSTGRES_PASSWORD: freight
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U freight -d freight_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - freight-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: freight-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - freight-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: freight-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - freight-network

  # Kafka (Redpanda)
  redpanda:
    image: redpandadata/redpanda:latest
    container_name: freight-redpanda
    command:
      - redpanda
      - start
      - --smp
      - '1'
      - --reserve-memory
      - 0M
      - --overprovisioned
      - --node-id
      - '0'
      - --kafka-addr
      - PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - --advertise-kafka-addr
      - PLAINTEXT://redpanda:29092,OUTSIDE://localhost:9092
      - --pandaproxy-addr
      - 0.0.0.0:8082
      - --advertise-pandaproxy-addr
      - localhost:8082
    ports:
      - "8081:8081"
      - "8082:8082"
      - "9092:9092"
      - "29092:29092"
    volumes:
      - redpanda_data:/var/lib/redpanda/data
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster info"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - freight-network

  # Quotation Service
  quotation-service:
    build:
      context: ../../services/quotation/quotation-service
      dockerfile: Dockerfile
    container_name: freight-quotation
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://freight:freight@postgres:5432/freight_db
      - REDIS_URL=redis://redis:6379/0
      - OBJECT_STORE_ENDPOINT=minio:9000
      - OBJECT_STORE_ACCESS_KEY=minioadmin
      - OBJECT_STORE_SECRET_KEY=minioadmin
      - OBJECT_STORE_SECURE=false
      - OBJECT_STORE_BUCKET=freight-docs
      - KAFKA_BROKERS=redpanda:29092
      - SERVICE_NAME=quotation-service
      - SERVICE_VERSION=1.0.0
      - AUTH_ENABLED=false
      - LOG_LEVEL=INFO
    ports:
      - "8101:8101"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    volumes:
      - ../../services/quotation/quotation-service:/app
    networks:
      - freight-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8101/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Booking Service (placeholder)
  booking-service:
    build:
      context: ../../services/booking
      dockerfile: Dockerfile
    container_name: freight-booking
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://freight:freight@postgres:5432/freight_db
      - REDIS_URL=redis://redis:6379/1
      - OBJECT_STORE_ENDPOINT=minio:9000
      - OBJECT_STORE_ACCESS_KEY=minioadmin
      - OBJECT_STORE_SECRET_KEY=minioadmin
      - OBJECT_STORE_SECURE=false
      - KAFKA_BROKERS=redpanda:29092
      - SERVICE_NAME=booking-service
    ports:
      - "8102:8102"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    networks:
      - freight-network
    profiles:
      - full-stack

  # CRM Service (placeholder)
  crm-service:
    build:
      context: ../../services/crm
      dockerfile: Dockerfile
    container_name: freight-crm
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://freight:freight@postgres:5432/freight_db
      - REDIS_URL=redis://redis:6379/2
      - SERVICE_NAME=crm-service
    ports:
      - "8103:8103"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - freight-network
    profiles:
      - full-stack

  # Vendor Service (placeholder)
  vendor-service:
    build:
      context: ../../services/vendor
      dockerfile: Dockerfile
    container_name: freight-vendor
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://freight:freight@postgres:5432/freight_db
      - REDIS_URL=redis://redis:6379/3
      - SERVICE_NAME=vendor-service
    ports:
      - "8104:8104"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - freight-network
    profiles:
      - full-stack

  # Notification Service (placeholder)
  notify-service:
    build:
      context: ../../services/notify
      dockerfile: Dockerfile
    container_name: freight-notify
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://freight:freight@postgres:5432/freight_db
      - REDIS_URL=redis://redis:6379/4
      - KAFKA_BROKERS=redpanda:29092
      - SERVICE_NAME=notify-service
    ports:
      - "8105:8105"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    networks:
      - freight-network
    profiles:
      - full-stack

  # Analytics Service (placeholder)
  analytics-service:
    build:
      context: ../../services/analytics
      dockerfile: Dockerfile
    container_name: freight-analytics
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://freight:freight@postgres:5432/freight_db
      - REDIS_URL=redis://redis:6379/5
      - OBJECT_STORE_ENDPOINT=minio:9000
      - OBJECT_STORE_ACCESS_KEY=minioadmin
      - OBJECT_STORE_SECRET_KEY=minioadmin
      - KAFKA_BROKERS=redpanda:29092
      - SERVICE_NAME=analytics-service
    ports:
      - "8106:8106"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    networks:
      - freight-network
    profiles:
      - full-stack

  # Customer Portal Frontend
  customer-portal:
    build:
      context: ../../frontend/customer-portal
      dockerfile: Dockerfile
    container_name: freight-customer-portal
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=/api
    volumes:
      - nginx_logs:/var/log/nginx
    networks:
      - freight-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Dashboard Frontend
  admin-dashboard:
    build:
      context: ../../frontend/admin-dashboard
      dockerfile: Dockerfile
    container_name: freight-admin-dashboard
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=/api
    volumes:
      - nginx_logs:/var/log/nginx
    networks:
      - freight-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: freight-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - freight-network
    depends_on:
      - quotation-service
      - customer-portal
      - admin-dashboard
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: freight-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - freight-network
    profiles:
      - monitoring

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: freight-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - freight-network
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  minio_data:
  redpanda_data:
  prometheus_data:
  grafana_data:
  nginx_logs:

networks:
  freight-network:
    driver: bridge

